/* Auto-generated by genmsg_cpp for file /home/cody/groovy_workspace/GitHubRepos/X-Bar_stack/SpiderRobot_pkg/msg/MyArray.msg */
#ifndef SPIDERROBOT_PKG_MESSAGE_MYARRAY_H
#define SPIDERROBOT_PKG_MESSAGE_MYARRAY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace SpiderRobot_pkg
{
template <class ContainerAllocator>
struct MyArray_ {
  typedef MyArray_<ContainerAllocator> Type;

  MyArray_()
  : data()
  , size(0)
  , command(0)
  , speed(0)
  {
    data.assign(0);
  }

  MyArray_(const ContainerAllocator& _alloc)
  : data()
  , size(0)
  , command(0)
  , speed(0)
  {
    data.assign(0);
  }

  typedef boost::array<int16_t, 18>  _data_type;
  boost::array<int16_t, 18>  data;

  typedef int8_t _size_type;
  int8_t size;

  typedef int8_t _command_type;
  int8_t command;

  typedef int16_t _speed_type;
  int16_t speed;


  typedef boost::shared_ptr< ::SpiderRobot_pkg::MyArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::SpiderRobot_pkg::MyArray_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MyArray
typedef  ::SpiderRobot_pkg::MyArray_<std::allocator<void> > MyArray;

typedef boost::shared_ptr< ::SpiderRobot_pkg::MyArray> MyArrayPtr;
typedef boost::shared_ptr< ::SpiderRobot_pkg::MyArray const> MyArrayConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::SpiderRobot_pkg::MyArray_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::SpiderRobot_pkg::MyArray_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace SpiderRobot_pkg

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::SpiderRobot_pkg::MyArray_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::SpiderRobot_pkg::MyArray_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::SpiderRobot_pkg::MyArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a76a9cc52d3754ba6d87d09948ffaf98";
  }

  static const char* value(const  ::SpiderRobot_pkg::MyArray_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa76a9cc52d3754baULL;
  static const uint64_t static_value2 = 0x6d87d09948ffaf98ULL;
};

template<class ContainerAllocator>
struct DataType< ::SpiderRobot_pkg::MyArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "SpiderRobot_pkg/MyArray";
  }

  static const char* value(const  ::SpiderRobot_pkg::MyArray_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::SpiderRobot_pkg::MyArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16[18] data\n\
int8 size\n\
int8 command\n\
int16 speed\n\
\n\
";
  }

  static const char* value(const  ::SpiderRobot_pkg::MyArray_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::SpiderRobot_pkg::MyArray_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::SpiderRobot_pkg::MyArray_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.data);
    stream.next(m.size);
    stream.next(m.command);
    stream.next(m.speed);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MyArray_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::SpiderRobot_pkg::MyArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::SpiderRobot_pkg::MyArray_<ContainerAllocator> & v) 
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "size: ";
    Printer<int8_t>::stream(s, indent + "  ", v.size);
    s << indent << "command: ";
    Printer<int8_t>::stream(s, indent + "  ", v.command);
    s << indent << "speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.speed);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SPIDERROBOT_PKG_MESSAGE_MYARRAY_H

