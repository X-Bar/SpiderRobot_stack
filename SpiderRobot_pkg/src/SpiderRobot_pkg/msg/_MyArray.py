"""autogenerated by genpy from SpiderRobot_pkg/MyArray.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MyArray(genpy.Message):
  _md5sum = "a76a9cc52d3754ba6d87d09948ffaf98"
  _type = "SpiderRobot_pkg/MyArray"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16[18] data
int8 size
int8 command
int16 speed

"""
  __slots__ = ['data','size','command','speed']
  _slot_types = ['int16[18]','int8','int8','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       data,size,command,speed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MyArray, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.data is None:
        self.data = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      if self.size is None:
        self.size = 0
      if self.command is None:
        self.command = 0
      if self.speed is None:
        self.speed = 0
    else:
      self.data = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      self.size = 0
      self.command = 0
      self.speed = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_18h.pack(*self.data))
      _x = self
      buff.write(_struct_2bh.pack(_x.size, _x.command, _x.speed))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 36
      self.data = _struct_18h.unpack(str[start:end])
      _x = self
      start = end
      end += 4
      (_x.size, _x.command, _x.speed,) = _struct_2bh.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.data.tostring())
      _x = self
      buff.write(_struct_2bh.pack(_x.size, _x.command, _x.speed))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 36
      self.data = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=18)
      _x = self
      start = end
      end += 4
      (_x.size, _x.command, _x.speed,) = _struct_2bh.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_18h = struct.Struct("<18h")
_struct_2bh = struct.Struct("<2bh")
